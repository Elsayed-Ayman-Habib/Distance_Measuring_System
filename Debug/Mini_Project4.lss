
Mini_Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000241c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  0000241c  000024b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800176  00800176  000025c6  2**0
                  ALLOC
  3 .stab         00001cd4  00000000  00000000  000025c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f30  00000000  00000000  0000429c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000051cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000536c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000555e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007969  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00008cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00009ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000acec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 11 	call	0x229c	; 0x229c <main>
      8a:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 58       	subi	r30, 0x8A	; 138
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_5>:
static volatile void (*global_callBackPtr)(void) = NULL_PTR;
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_CAPT_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	if(global_callBackPtr != NULL_PTR)
     e58:	80 91 76 01 	lds	r24, 0x0176
     e5c:	90 91 77 01 	lds	r25, 0x0177
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_5+0x40>
	{

		(*global_callBackPtr)();
     e64:	e0 91 76 01 	lds	r30, 0x0176
     e68:	f0 91 77 01 	lds	r31, 0x0177
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <ICU_init>:
/*******************************************************************************
 *                              Functions Definitions                          *
 *******************************************************************************/
void ICU_init(const ICU_ConfigType *Config1) {
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <ICU_init+0x6>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTD_ID, ICU_INPUT_PIN, PIN_INPUT);
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	66 e0       	ldi	r22, 0x06	; 6
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <GPIO_setupPinDirection>
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
     eac:	ef e4       	ldi	r30, 0x4F	; 79
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	8c e0       	ldi	r24, 0x0C	; 12
     eb2:	80 83       	st	Z, r24

	TCCR1B = (TCCR1B & 0Xf8) | (Config1->PRE);
     eb4:	ae e4       	ldi	r26, 0x4E	; 78
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ee e4       	ldi	r30, 0x4E	; 78
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	98 2f       	mov	r25, r24
     ec0:	98 7f       	andi	r25, 0xF8	; 248
     ec2:	e9 81       	ldd	r30, Y+1	; 0x01
     ec4:	fa 81       	ldd	r31, Y+2	; 0x02
     ec6:	80 81       	ld	r24, Z
     ec8:	89 2b       	or	r24, r25
     eca:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xbf) | ((Config1->EDGE) << 6);
     ecc:	ae e4       	ldi	r26, 0x4E	; 78
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	ee e4       	ldi	r30, 0x4E	; 78
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	28 2f       	mov	r18, r24
     ed8:	2f 7b       	andi	r18, 0xBF	; 191
     eda:	e9 81       	ldd	r30, Y+1	; 0x01
     edc:	fa 81       	ldd	r31, Y+2	; 0x02
     ede:	81 81       	ldd	r24, Z+1	; 0x01
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	00 24       	eor	r0, r0
     ee6:	96 95       	lsr	r25
     ee8:	87 95       	ror	r24
     eea:	07 94       	ror	r0
     eec:	96 95       	lsr	r25
     eee:	87 95       	ror	r24
     ef0:	07 94       	ror	r0
     ef2:	98 2f       	mov	r25, r24
     ef4:	80 2d       	mov	r24, r0
     ef6:	82 2b       	or	r24, r18
     ef8:	8c 93       	st	X, r24
	TCNT1 = 0;
     efa:	ec e4       	ldi	r30, 0x4C	; 76
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	11 82       	std	Z+1, r1	; 0x01
     f00:	10 82       	st	Z, r1
	ICR1 = 0;
     f02:	e6 e4       	ldi	r30, 0x46	; 70
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	11 82       	std	Z+1, r1	; 0x01
     f08:	10 82       	st	Z, r1
	TIMSK |= (1 << TICIE1);
     f0a:	a9 e5       	ldi	r26, 0x59	; 89
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e9 e5       	ldi	r30, 0x59	; 89
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 62       	ori	r24, 0x20	; 32
     f16:	8c 93       	st	X, r24
}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <ICU_setCallBack>:
void ICU_setCallBack(void (*function_ptr)(void)) {
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <ICU_setCallBack+0x6>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
	global_callBackPtr = function_ptr;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	90 93 77 01 	sts	0x0177, r25
     f38:	80 93 76 01 	sts	0x0176, r24
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <ICU_setEdgeDetectionType>:
void ICU_setEdgeDetectionType(const Edge edge1) {
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xbf) | (edge1 << 6);
     f52:	ae e4       	ldi	r26, 0x4E	; 78
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ee e4       	ldi	r30, 0x4E	; 78
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	2f 7b       	andi	r18, 0xBF	; 191
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	00 24       	eor	r0, r0
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24
     f6c:	07 94       	ror	r0
     f6e:	96 95       	lsr	r25
     f70:	87 95       	ror	r24
     f72:	07 94       	ror	r0
     f74:	98 2f       	mov	r25, r24
     f76:	80 2d       	mov	r24, r0
     f78:	82 2b       	or	r24, r18
     f7a:	8c 93       	st	X, r24
}
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <ICU_getICUvalue>:
uint16 ICU_getICUvalue() {
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     f8c:	e6 e4       	ldi	r30, 0x46	; 70
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	91 81       	ldd	r25, Z+1	; 0x01
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <ICU_clearTimerValue>:
void ICU_clearTimerValue() {
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     fa2:	ec e4       	ldi	r30, 0x4C	; 76
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	11 82       	std	Z+1, r1	; 0x01
     fa8:	10 82       	st	Z, r1
}
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <ICU_deInit>:
void ICU_deInit() {
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
     fb8:	ef e4       	ldi	r30, 0x4F	; 79
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	10 82       	st	Z, r1
	TCCR1B = 0;
     fbe:	ee e4       	ldi	r30, 0x4E	; 78
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	10 82       	st	Z, r1
	TCNT1 = 0;
     fc4:	ec e4       	ldi	r30, 0x4C	; 76
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	11 82       	std	Z+1, r1	; 0x01
     fca:	10 82       	st	Z, r1
	ICR1 = 0;
     fcc:	e6 e4       	ldi	r30, 0x46	; 70
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	11 82       	std	Z+1, r1	; 0x01
     fd2:	10 82       	st	Z, r1
	TIMSK &= ~(1 << TICIE1);
     fd4:	a9 e5       	ldi	r26, 0x59	; 89
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e9 e5       	ldi	r30, 0x59	; 89
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 7d       	andi	r24, 0xDF	; 223
     fe0:	8c 93       	st	X, r24

}
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <LCD_sendCommand>:
#include "avr/delay.h"
#include <stdlib.h>
/*******************************************************************************
 *                              Functions Definitions                          *
 *******************************************************************************/
void LCD_sendCommand(uint8 command) {/*FUNCTION TO SEND SPECIFIC COMMANDS TO CONTROL LCD */
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	e9 97       	sbiw	r28, 0x39	; 57
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(COMMAND_LINE, RS_ID, LOGIC_LOW);
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePin>

	GPIO_writePin(COMMAND_LINE, RW_ID, LOGIC_LOW );
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePin>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a0 e8       	ldi	r26, 0x80	; 128
    1018:	bf e3       	ldi	r27, 0x3F	; 63
    101a:	8d ab       	std	Y+53, r24	; 0x35
    101c:	9e ab       	std	Y+54, r25	; 0x36
    101e:	af ab       	std	Y+55, r26	; 0x37
    1020:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1022:	6d a9       	ldd	r22, Y+53	; 0x35
    1024:	7e a9       	ldd	r23, Y+54	; 0x36
    1026:	8f a9       	ldd	r24, Y+55	; 0x37
    1028:	98 ad       	ldd	r25, Y+56	; 0x38
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	4a e7       	ldi	r20, 0x7A	; 122
    1030:	53 e4       	ldi	r21, 0x43	; 67
    1032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	89 ab       	std	Y+49, r24	; 0x31
    103c:	9a ab       	std	Y+50, r25	; 0x32
    103e:	ab ab       	std	Y+51, r26	; 0x33
    1040:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1042:	69 a9       	ldd	r22, Y+49	; 0x31
    1044:	7a a9       	ldd	r23, Y+50	; 0x32
    1046:	8b a9       	ldd	r24, Y+51	; 0x33
    1048:	9c a9       	ldd	r25, Y+52	; 0x34
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e8       	ldi	r20, 0x80	; 128
    1050:	5f e3       	ldi	r21, 0x3F	; 63
    1052:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1056:	88 23       	and	r24, r24
    1058:	2c f4       	brge	.+10     	; 0x1064 <LCD_sendCommand+0x7c>
		__ticks = 1;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	98 ab       	std	Y+48, r25	; 0x30
    1060:	8f a7       	std	Y+47, r24	; 0x2f
    1062:	3f c0       	rjmp	.+126    	; 0x10e2 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1064:	69 a9       	ldd	r22, Y+49	; 0x31
    1066:	7a a9       	ldd	r23, Y+50	; 0x32
    1068:	8b a9       	ldd	r24, Y+51	; 0x33
    106a:	9c a9       	ldd	r25, Y+52	; 0x34
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	3f ef       	ldi	r19, 0xFF	; 255
    1070:	4f e7       	ldi	r20, 0x7F	; 127
    1072:	57 e4       	ldi	r21, 0x47	; 71
    1074:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1078:	18 16       	cp	r1, r24
    107a:	4c f5       	brge	.+82     	; 0x10ce <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107c:	6d a9       	ldd	r22, Y+53	; 0x35
    107e:	7e a9       	ldd	r23, Y+54	; 0x36
    1080:	8f a9       	ldd	r24, Y+55	; 0x37
    1082:	98 ad       	ldd	r25, Y+56	; 0x38
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e2       	ldi	r20, 0x20	; 32
    108a:	51 e4       	ldi	r21, 0x41	; 65
    108c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	98 ab       	std	Y+48, r25	; 0x30
    10a2:	8f a7       	std	Y+47, r24	; 0x2f
    10a4:	0f c0       	rjmp	.+30     	; 0x10c4 <LCD_sendCommand+0xdc>
    10a6:	89 e1       	ldi	r24, 0x19	; 25
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9e a7       	std	Y+46, r25	; 0x2e
    10ac:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    10b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <LCD_sendCommand+0xca>
    10b6:	9e a7       	std	Y+46, r25	; 0x2e
    10b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    10bc:	98 a9       	ldd	r25, Y+48	; 0x30
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	98 ab       	std	Y+48, r25	; 0x30
    10c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    10c6:	98 a9       	ldd	r25, Y+48	; 0x30
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	69 f7       	brne	.-38     	; 0x10a6 <LCD_sendCommand+0xbe>
    10cc:	14 c0       	rjmp	.+40     	; 0x10f6 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ce:	69 a9       	ldd	r22, Y+49	; 0x31
    10d0:	7a a9       	ldd	r23, Y+50	; 0x32
    10d2:	8b a9       	ldd	r24, Y+51	; 0x33
    10d4:	9c a9       	ldd	r25, Y+52	; 0x34
    10d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	98 ab       	std	Y+48, r25	; 0x30
    10e0:	8f a7       	std	Y+47, r24	; 0x2f
    10e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    10e4:	98 a9       	ldd	r25, Y+48	; 0x30
    10e6:	9c a7       	std	Y+44, r25	; 0x2c
    10e8:	8b a7       	std	Y+43, r24	; 0x2b
    10ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    10ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <LCD_sendCommand+0x106>
    10f2:	9c a7       	std	Y+44, r25	; 0x2c
    10f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	GPIO_writePin(COMMAND_LINE, E_ID, LOGIC_HIGH);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	62 e0       	ldi	r22, 0x02	; 2
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePin>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a0 e8       	ldi	r26, 0x80	; 128
    1106:	bf e3       	ldi	r27, 0x3F	; 63
    1108:	8f a3       	std	Y+39, r24	; 0x27
    110a:	98 a7       	std	Y+40, r25	; 0x28
    110c:	a9 a7       	std	Y+41, r26	; 0x29
    110e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1110:	6f a1       	ldd	r22, Y+39	; 0x27
    1112:	78 a5       	ldd	r23, Y+40	; 0x28
    1114:	89 a5       	ldd	r24, Y+41	; 0x29
    1116:	9a a5       	ldd	r25, Y+42	; 0x2a
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a e7       	ldi	r20, 0x7A	; 122
    111e:	53 e4       	ldi	r21, 0x43	; 67
    1120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	8b a3       	std	Y+35, r24	; 0x23
    112a:	9c a3       	std	Y+36, r25	; 0x24
    112c:	ad a3       	std	Y+37, r26	; 0x25
    112e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1130:	6b a1       	ldd	r22, Y+35	; 0x23
    1132:	7c a1       	ldd	r23, Y+36	; 0x24
    1134:	8d a1       	ldd	r24, Y+37	; 0x25
    1136:	9e a1       	ldd	r25, Y+38	; 0x26
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1144:	88 23       	and	r24, r24
    1146:	2c f4       	brge	.+10     	; 0x1152 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9a a3       	std	Y+34, r25	; 0x22
    114e:	89 a3       	std	Y+33, r24	; 0x21
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1152:	6b a1       	ldd	r22, Y+35	; 0x23
    1154:	7c a1       	ldd	r23, Y+36	; 0x24
    1156:	8d a1       	ldd	r24, Y+37	; 0x25
    1158:	9e a1       	ldd	r25, Y+38	; 0x26
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	4c f5       	brge	.+82     	; 0x11bc <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116a:	6f a1       	ldd	r22, Y+39	; 0x27
    116c:	78 a5       	ldd	r23, Y+40	; 0x28
    116e:	89 a5       	ldd	r24, Y+41	; 0x29
    1170:	9a a5       	ldd	r25, Y+42	; 0x2a
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	51 e4       	ldi	r21, 0x41	; 65
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	9a a3       	std	Y+34, r25	; 0x22
    1190:	89 a3       	std	Y+33, r24	; 0x21
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <LCD_sendCommand+0x1ca>
    1194:	89 e1       	ldi	r24, 0x19	; 25
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	98 a3       	std	Y+32, r25	; 0x20
    119a:	8f 8f       	std	Y+31, r24	; 0x1f
    119c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    119e:	98 a1       	ldd	r25, Y+32	; 0x20
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <LCD_sendCommand+0x1b8>
    11a4:	98 a3       	std	Y+32, r25	; 0x20
    11a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a8:	89 a1       	ldd	r24, Y+33	; 0x21
    11aa:	9a a1       	ldd	r25, Y+34	; 0x22
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	9a a3       	std	Y+34, r25	; 0x22
    11b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	89 a1       	ldd	r24, Y+33	; 0x21
    11b4:	9a a1       	ldd	r25, Y+34	; 0x22
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	69 f7       	brne	.-38     	; 0x1194 <LCD_sendCommand+0x1ac>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11bc:	6b a1       	ldd	r22, Y+35	; 0x23
    11be:	7c a1       	ldd	r23, Y+36	; 0x24
    11c0:	8d a1       	ldd	r24, Y+37	; 0x25
    11c2:	9e a1       	ldd	r25, Y+38	; 0x26
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9a a3       	std	Y+34, r25	; 0x22
    11ce:	89 a3       	std	Y+33, r24	; 0x21
    11d0:	89 a1       	ldd	r24, Y+33	; 0x21
    11d2:	9a a1       	ldd	r25, Y+34	; 0x22
    11d4:	9e 8f       	std	Y+30, r25	; 0x1e
    11d6:	8d 8f       	std	Y+29, r24	; 0x1d
    11d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <LCD_sendCommand+0x1f4>
    11e0:	9e 8f       	std	Y+30, r25	; 0x1e
    11e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePort(DATA_LINE, command);
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	69 ad       	ldd	r22, Y+57	; 0x39
    11e8:	0e 94 c5 10 	call	0x218a	; 0x218a <GPIO_writePort>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	a0 e8       	ldi	r26, 0x80	; 128
    11f2:	bf e3       	ldi	r27, 0x3F	; 63
    11f4:	89 8f       	std	Y+25, r24	; 0x19
    11f6:	9a 8f       	std	Y+26, r25	; 0x1a
    11f8:	ab 8f       	std	Y+27, r26	; 0x1b
    11fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11fc:	69 8d       	ldd	r22, Y+25	; 0x19
    11fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1202:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	4a e7       	ldi	r20, 0x7A	; 122
    120a:	53 e4       	ldi	r21, 0x43	; 67
    120c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	8d 8b       	std	Y+21, r24	; 0x15
    1216:	9e 8b       	std	Y+22, r25	; 0x16
    1218:	af 8b       	std	Y+23, r26	; 0x17
    121a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    121c:	6d 89       	ldd	r22, Y+21	; 0x15
    121e:	7e 89       	ldd	r23, Y+22	; 0x16
    1220:	8f 89       	ldd	r24, Y+23	; 0x17
    1222:	98 8d       	ldd	r25, Y+24	; 0x18
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e8       	ldi	r20, 0x80	; 128
    122a:	5f e3       	ldi	r21, 0x3F	; 63
    122c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1230:	88 23       	and	r24, r24
    1232:	2c f4       	brge	.+10     	; 0x123e <LCD_sendCommand+0x256>
		__ticks = 1;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	9c 8b       	std	Y+20, r25	; 0x14
    123a:	8b 8b       	std	Y+19, r24	; 0x13
    123c:	3f c0       	rjmp	.+126    	; 0x12bc <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    123e:	6d 89       	ldd	r22, Y+21	; 0x15
    1240:	7e 89       	ldd	r23, Y+22	; 0x16
    1242:	8f 89       	ldd	r24, Y+23	; 0x17
    1244:	98 8d       	ldd	r25, Y+24	; 0x18
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	4f e7       	ldi	r20, 0x7F	; 127
    124c:	57 e4       	ldi	r21, 0x47	; 71
    124e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1252:	18 16       	cp	r1, r24
    1254:	4c f5       	brge	.+82     	; 0x12a8 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1256:	69 8d       	ldd	r22, Y+25	; 0x19
    1258:	7a 8d       	ldd	r23, Y+26	; 0x1a
    125a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    125c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e2       	ldi	r20, 0x20	; 32
    1264:	51 e4       	ldi	r21, 0x41	; 65
    1266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	bc 01       	movw	r22, r24
    1270:	cd 01       	movw	r24, r26
    1272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	9c 8b       	std	Y+20, r25	; 0x14
    127c:	8b 8b       	std	Y+19, r24	; 0x13
    127e:	0f c0       	rjmp	.+30     	; 0x129e <LCD_sendCommand+0x2b6>
    1280:	89 e1       	ldi	r24, 0x19	; 25
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9a 8b       	std	Y+18, r25	; 0x12
    1286:	89 8b       	std	Y+17, r24	; 0x11
    1288:	89 89       	ldd	r24, Y+17	; 0x11
    128a:	9a 89       	ldd	r25, Y+18	; 0x12
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	f1 f7       	brne	.-4      	; 0x128c <LCD_sendCommand+0x2a4>
    1290:	9a 8b       	std	Y+18, r25	; 0x12
    1292:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1294:	8b 89       	ldd	r24, Y+19	; 0x13
    1296:	9c 89       	ldd	r25, Y+20	; 0x14
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	9c 8b       	std	Y+20, r25	; 0x14
    129c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129e:	8b 89       	ldd	r24, Y+19	; 0x13
    12a0:	9c 89       	ldd	r25, Y+20	; 0x14
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	69 f7       	brne	.-38     	; 0x1280 <LCD_sendCommand+0x298>
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a8:	6d 89       	ldd	r22, Y+21	; 0x15
    12aa:	7e 89       	ldd	r23, Y+22	; 0x16
    12ac:	8f 89       	ldd	r24, Y+23	; 0x17
    12ae:	98 8d       	ldd	r25, Y+24	; 0x18
    12b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9c 8b       	std	Y+20, r25	; 0x14
    12ba:	8b 8b       	std	Y+19, r24	; 0x13
    12bc:	8b 89       	ldd	r24, Y+19	; 0x13
    12be:	9c 89       	ldd	r25, Y+20	; 0x14
    12c0:	98 8b       	std	Y+16, r25	; 0x10
    12c2:	8f 87       	std	Y+15, r24	; 0x0f
    12c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c6:	98 89       	ldd	r25, Y+16	; 0x10
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <LCD_sendCommand+0x2e0>
    12cc:	98 8b       	std	Y+16, r25	; 0x10
    12ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	GPIO_writePin(COMMAND_LINE, E_ID, LOGIC_LOW);
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	62 e0       	ldi	r22, 0x02	; 2
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePin>
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	a0 e8       	ldi	r26, 0x80	; 128
    12e0:	bf e3       	ldi	r27, 0x3F	; 63
    12e2:	8b 87       	std	Y+11, r24	; 0x0b
    12e4:	9c 87       	std	Y+12, r25	; 0x0c
    12e6:	ad 87       	std	Y+13, r26	; 0x0d
    12e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	4a e7       	ldi	r20, 0x7A	; 122
    12f8:	53 e4       	ldi	r21, 0x43	; 67
    12fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	8f 83       	std	Y+7, r24	; 0x07
    1304:	98 87       	std	Y+8, r25	; 0x08
    1306:	a9 87       	std	Y+9, r26	; 0x09
    1308:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    130a:	6f 81       	ldd	r22, Y+7	; 0x07
    130c:	78 85       	ldd	r23, Y+8	; 0x08
    130e:	89 85       	ldd	r24, Y+9	; 0x09
    1310:	9a 85       	ldd	r25, Y+10	; 0x0a
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e8       	ldi	r20, 0x80	; 128
    1318:	5f e3       	ldi	r21, 0x3F	; 63
    131a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    131e:	88 23       	and	r24, r24
    1320:	2c f4       	brge	.+10     	; 0x132c <LCD_sendCommand+0x344>
		__ticks = 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	3f c0       	rjmp	.+126    	; 0x13aa <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    132c:	6f 81       	ldd	r22, Y+7	; 0x07
    132e:	78 85       	ldd	r23, Y+8	; 0x08
    1330:	89 85       	ldd	r24, Y+9	; 0x09
    1332:	9a 85       	ldd	r25, Y+10	; 0x0a
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	3f ef       	ldi	r19, 0xFF	; 255
    1338:	4f e7       	ldi	r20, 0x7F	; 127
    133a:	57 e4       	ldi	r21, 0x47	; 71
    133c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1340:	18 16       	cp	r1, r24
    1342:	4c f5       	brge	.+82     	; 0x1396 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1344:	6b 85       	ldd	r22, Y+11	; 0x0b
    1346:	7c 85       	ldd	r23, Y+12	; 0x0c
    1348:	8d 85       	ldd	r24, Y+13	; 0x0d
    134a:	9e 85       	ldd	r25, Y+14	; 0x0e
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e2       	ldi	r20, 0x20	; 32
    1352:	51 e4       	ldi	r21, 0x41	; 65
    1354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	9e 83       	std	Y+6, r25	; 0x06
    136a:	8d 83       	std	Y+5, r24	; 0x05
    136c:	0f c0       	rjmp	.+30     	; 0x138c <LCD_sendCommand+0x3a4>
    136e:	89 e1       	ldi	r24, 0x19	; 25
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	8b 83       	std	Y+3, r24	; 0x03
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <LCD_sendCommand+0x392>
    137e:	9c 83       	std	Y+4, r25	; 0x04
    1380:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	9e 83       	std	Y+6, r25	; 0x06
    138a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	69 f7       	brne	.-38     	; 0x136e <LCD_sendCommand+0x386>
    1394:	14 c0       	rjmp	.+40     	; 0x13be <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1396:	6f 81       	ldd	r22, Y+7	; 0x07
    1398:	78 85       	ldd	r23, Y+8	; 0x08
    139a:	89 85       	ldd	r24, Y+9	; 0x09
    139c:	9a 85       	ldd	r25, Y+10	; 0x0a
    139e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9e 83       	std	Y+6, r25	; 0x06
    13a8:	8d 83       	std	Y+5, r24	; 0x05
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	9a 81       	ldd	r25, Y+2	; 0x02
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <LCD_sendCommand+0x3ce>
    13ba:	9a 83       	std	Y+2, r25	; 0x02
    13bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    13be:	e9 96       	adiw	r28, 0x39	; 57
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <LCD_init>:
void LCD_init() {
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(COMMAND_LINE, RS_ID, PIN_OUTPUT); //RS INIT
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(COMMAND_LINE, RW_ID, PIN_OUTPUT); // RW INIT
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	61 e0       	ldi	r22, 0x01	; 1
    13e6:	41 e0       	ldi	r20, 0x01	; 1
    13e8:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(COMMAND_LINE, E_ID, PIN_OUTPUT); // ENABLE INIT
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	62 e0       	ldi	r22, 0x02	; 2
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <GPIO_setupPinDirection>
	GPIO_setupPortDirection(DATA_LINE, PORT_OUTPUT); //INIT PORTC FOR DATA BUS
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	6f ef       	ldi	r22, 0xFF	; 255
    13fa:	0e 94 81 10 	call	0x2102	; 0x2102 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    13fe:	88 e3       	ldi	r24, 0x38	; 56
    1400:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF );
    1404:	8c e0       	ldi	r24, 0x0C	; 12
    1406:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <LCD_sendCommand>
}
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data) {
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	e9 97       	sbiw	r28, 0x39	; 57
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(COMMAND_LINE, RS_ID, LOGIC_HIGH);//RS SET FOR DISPLAYING DATA
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePin>

	GPIO_writePin(COMMAND_LINE, RW_ID, LOGIC_LOW);//WRITE MODE
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	61 e0       	ldi	r22, 0x01	; 1
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePin>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a0 e8       	ldi	r26, 0x80	; 128
    1446:	bf e3       	ldi	r27, 0x3F	; 63
    1448:	8d ab       	std	Y+53, r24	; 0x35
    144a:	9e ab       	std	Y+54, r25	; 0x36
    144c:	af ab       	std	Y+55, r26	; 0x37
    144e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1450:	6d a9       	ldd	r22, Y+53	; 0x35
    1452:	7e a9       	ldd	r23, Y+54	; 0x36
    1454:	8f a9       	ldd	r24, Y+55	; 0x37
    1456:	98 ad       	ldd	r25, Y+56	; 0x38
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	4a e7       	ldi	r20, 0x7A	; 122
    145e:	53 e4       	ldi	r21, 0x43	; 67
    1460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	89 ab       	std	Y+49, r24	; 0x31
    146a:	9a ab       	std	Y+50, r25	; 0x32
    146c:	ab ab       	std	Y+51, r26	; 0x33
    146e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1470:	69 a9       	ldd	r22, Y+49	; 0x31
    1472:	7a a9       	ldd	r23, Y+50	; 0x32
    1474:	8b a9       	ldd	r24, Y+51	; 0x33
    1476:	9c a9       	ldd	r25, Y+52	; 0x34
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e8       	ldi	r20, 0x80	; 128
    147e:	5f e3       	ldi	r21, 0x3F	; 63
    1480:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1484:	88 23       	and	r24, r24
    1486:	2c f4       	brge	.+10     	; 0x1492 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	98 ab       	std	Y+48, r25	; 0x30
    148e:	8f a7       	std	Y+47, r24	; 0x2f
    1490:	3f c0       	rjmp	.+126    	; 0x1510 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1492:	69 a9       	ldd	r22, Y+49	; 0x31
    1494:	7a a9       	ldd	r23, Y+50	; 0x32
    1496:	8b a9       	ldd	r24, Y+51	; 0x33
    1498:	9c a9       	ldd	r25, Y+52	; 0x34
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	3f ef       	ldi	r19, 0xFF	; 255
    149e:	4f e7       	ldi	r20, 0x7F	; 127
    14a0:	57 e4       	ldi	r21, 0x47	; 71
    14a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14a6:	18 16       	cp	r1, r24
    14a8:	4c f5       	brge	.+82     	; 0x14fc <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14aa:	6d a9       	ldd	r22, Y+53	; 0x35
    14ac:	7e a9       	ldd	r23, Y+54	; 0x36
    14ae:	8f a9       	ldd	r24, Y+55	; 0x37
    14b0:	98 ad       	ldd	r25, Y+56	; 0x38
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e2       	ldi	r20, 0x20	; 32
    14b8:	51 e4       	ldi	r21, 0x41	; 65
    14ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	98 ab       	std	Y+48, r25	; 0x30
    14d0:	8f a7       	std	Y+47, r24	; 0x2f
    14d2:	0f c0       	rjmp	.+30     	; 0x14f2 <LCD_displayCharacter+0xdc>
    14d4:	89 e1       	ldi	r24, 0x19	; 25
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9e a7       	std	Y+46, r25	; 0x2e
    14da:	8d a7       	std	Y+45, r24	; 0x2d
    14dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    14de:	9e a5       	ldd	r25, Y+46	; 0x2e
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <LCD_displayCharacter+0xca>
    14e4:	9e a7       	std	Y+46, r25	; 0x2e
    14e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ea:	98 a9       	ldd	r25, Y+48	; 0x30
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	98 ab       	std	Y+48, r25	; 0x30
    14f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14f4:	98 a9       	ldd	r25, Y+48	; 0x30
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	69 f7       	brne	.-38     	; 0x14d4 <LCD_displayCharacter+0xbe>
    14fa:	14 c0       	rjmp	.+40     	; 0x1524 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fc:	69 a9       	ldd	r22, Y+49	; 0x31
    14fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1500:	8b a9       	ldd	r24, Y+51	; 0x33
    1502:	9c a9       	ldd	r25, Y+52	; 0x34
    1504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	98 ab       	std	Y+48, r25	; 0x30
    150e:	8f a7       	std	Y+47, r24	; 0x2f
    1510:	8f a5       	ldd	r24, Y+47	; 0x2f
    1512:	98 a9       	ldd	r25, Y+48	; 0x30
    1514:	9c a7       	std	Y+44, r25	; 0x2c
    1516:	8b a7       	std	Y+43, r24	; 0x2b
    1518:	8b a5       	ldd	r24, Y+43	; 0x2b
    151a:	9c a5       	ldd	r25, Y+44	; 0x2c
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <LCD_displayCharacter+0x106>
    1520:	9c a7       	std	Y+44, r25	; 0x2c
    1522:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	GPIO_writePin(COMMAND_LINE, E_ID, LOGIC_HIGH);//SET ENABLE
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	62 e0       	ldi	r22, 0x02	; 2
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePin>
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a0 e8       	ldi	r26, 0x80	; 128
    1534:	bf e3       	ldi	r27, 0x3F	; 63
    1536:	8f a3       	std	Y+39, r24	; 0x27
    1538:	98 a7       	std	Y+40, r25	; 0x28
    153a:	a9 a7       	std	Y+41, r26	; 0x29
    153c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153e:	6f a1       	ldd	r22, Y+39	; 0x27
    1540:	78 a5       	ldd	r23, Y+40	; 0x28
    1542:	89 a5       	ldd	r24, Y+41	; 0x29
    1544:	9a a5       	ldd	r25, Y+42	; 0x2a
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	4a e7       	ldi	r20, 0x7A	; 122
    154c:	53 e4       	ldi	r21, 0x43	; 67
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	8b a3       	std	Y+35, r24	; 0x23
    1558:	9c a3       	std	Y+36, r25	; 0x24
    155a:	ad a3       	std	Y+37, r26	; 0x25
    155c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    155e:	6b a1       	ldd	r22, Y+35	; 0x23
    1560:	7c a1       	ldd	r23, Y+36	; 0x24
    1562:	8d a1       	ldd	r24, Y+37	; 0x25
    1564:	9e a1       	ldd	r25, Y+38	; 0x26
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e8       	ldi	r20, 0x80	; 128
    156c:	5f e3       	ldi	r21, 0x3F	; 63
    156e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1572:	88 23       	and	r24, r24
    1574:	2c f4       	brge	.+10     	; 0x1580 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	9a a3       	std	Y+34, r25	; 0x22
    157c:	89 a3       	std	Y+33, r24	; 0x21
    157e:	3f c0       	rjmp	.+126    	; 0x15fe <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1580:	6b a1       	ldd	r22, Y+35	; 0x23
    1582:	7c a1       	ldd	r23, Y+36	; 0x24
    1584:	8d a1       	ldd	r24, Y+37	; 0x25
    1586:	9e a1       	ldd	r25, Y+38	; 0x26
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	3f ef       	ldi	r19, 0xFF	; 255
    158c:	4f e7       	ldi	r20, 0x7F	; 127
    158e:	57 e4       	ldi	r21, 0x47	; 71
    1590:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1594:	18 16       	cp	r1, r24
    1596:	4c f5       	brge	.+82     	; 0x15ea <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1598:	6f a1       	ldd	r22, Y+39	; 0x27
    159a:	78 a5       	ldd	r23, Y+40	; 0x28
    159c:	89 a5       	ldd	r24, Y+41	; 0x29
    159e:	9a a5       	ldd	r25, Y+42	; 0x2a
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e2       	ldi	r20, 0x20	; 32
    15a6:	51 e4       	ldi	r21, 0x41	; 65
    15a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9a a3       	std	Y+34, r25	; 0x22
    15be:	89 a3       	std	Y+33, r24	; 0x21
    15c0:	0f c0       	rjmp	.+30     	; 0x15e0 <LCD_displayCharacter+0x1ca>
    15c2:	89 e1       	ldi	r24, 0x19	; 25
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	98 a3       	std	Y+32, r25	; 0x20
    15c8:	8f 8f       	std	Y+31, r24	; 0x1f
    15ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15cc:	98 a1       	ldd	r25, Y+32	; 0x20
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <LCD_displayCharacter+0x1b8>
    15d2:	98 a3       	std	Y+32, r25	; 0x20
    15d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d6:	89 a1       	ldd	r24, Y+33	; 0x21
    15d8:	9a a1       	ldd	r25, Y+34	; 0x22
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	9a a3       	std	Y+34, r25	; 0x22
    15de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e0:	89 a1       	ldd	r24, Y+33	; 0x21
    15e2:	9a a1       	ldd	r25, Y+34	; 0x22
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	69 f7       	brne	.-38     	; 0x15c2 <LCD_displayCharacter+0x1ac>
    15e8:	14 c0       	rjmp	.+40     	; 0x1612 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ea:	6b a1       	ldd	r22, Y+35	; 0x23
    15ec:	7c a1       	ldd	r23, Y+36	; 0x24
    15ee:	8d a1       	ldd	r24, Y+37	; 0x25
    15f0:	9e a1       	ldd	r25, Y+38	; 0x26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9a a3       	std	Y+34, r25	; 0x22
    15fc:	89 a3       	std	Y+33, r24	; 0x21
    15fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1600:	9a a1       	ldd	r25, Y+34	; 0x22
    1602:	9e 8f       	std	Y+30, r25	; 0x1e
    1604:	8d 8f       	std	Y+29, r24	; 0x1d
    1606:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1608:	9e 8d       	ldd	r25, Y+30	; 0x1e
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <LCD_displayCharacter+0x1f4>
    160e:	9e 8f       	std	Y+30, r25	; 0x1e
    1610:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePort(DATA_LINE, data);//PASSING DATA TO DISPLAY
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	69 ad       	ldd	r22, Y+57	; 0x39
    1616:	0e 94 c5 10 	call	0x218a	; 0x218a <GPIO_writePort>
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a0 e8       	ldi	r26, 0x80	; 128
    1620:	bf e3       	ldi	r27, 0x3F	; 63
    1622:	89 8f       	std	Y+25, r24	; 0x19
    1624:	9a 8f       	std	Y+26, r25	; 0x1a
    1626:	ab 8f       	std	Y+27, r26	; 0x1b
    1628:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162a:	69 8d       	ldd	r22, Y+25	; 0x19
    162c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    162e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1630:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	4a e7       	ldi	r20, 0x7A	; 122
    1638:	53 e4       	ldi	r21, 0x43	; 67
    163a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	8d 8b       	std	Y+21, r24	; 0x15
    1644:	9e 8b       	std	Y+22, r25	; 0x16
    1646:	af 8b       	std	Y+23, r26	; 0x17
    1648:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    164a:	6d 89       	ldd	r22, Y+21	; 0x15
    164c:	7e 89       	ldd	r23, Y+22	; 0x16
    164e:	8f 89       	ldd	r24, Y+23	; 0x17
    1650:	98 8d       	ldd	r25, Y+24	; 0x18
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e8       	ldi	r20, 0x80	; 128
    1658:	5f e3       	ldi	r21, 0x3F	; 63
    165a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    165e:	88 23       	and	r24, r24
    1660:	2c f4       	brge	.+10     	; 0x166c <LCD_displayCharacter+0x256>
		__ticks = 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9c 8b       	std	Y+20, r25	; 0x14
    1668:	8b 8b       	std	Y+19, r24	; 0x13
    166a:	3f c0       	rjmp	.+126    	; 0x16ea <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    166c:	6d 89       	ldd	r22, Y+21	; 0x15
    166e:	7e 89       	ldd	r23, Y+22	; 0x16
    1670:	8f 89       	ldd	r24, Y+23	; 0x17
    1672:	98 8d       	ldd	r25, Y+24	; 0x18
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	3f ef       	ldi	r19, 0xFF	; 255
    1678:	4f e7       	ldi	r20, 0x7F	; 127
    167a:	57 e4       	ldi	r21, 0x47	; 71
    167c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1680:	18 16       	cp	r1, r24
    1682:	4c f5       	brge	.+82     	; 0x16d6 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1684:	69 8d       	ldd	r22, Y+25	; 0x19
    1686:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e2       	ldi	r20, 0x20	; 32
    1692:	51 e4       	ldi	r21, 0x41	; 65
    1694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	9c 8b       	std	Y+20, r25	; 0x14
    16aa:	8b 8b       	std	Y+19, r24	; 0x13
    16ac:	0f c0       	rjmp	.+30     	; 0x16cc <LCD_displayCharacter+0x2b6>
    16ae:	89 e1       	ldi	r24, 0x19	; 25
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9a 8b       	std	Y+18, r25	; 0x12
    16b4:	89 8b       	std	Y+17, r24	; 0x11
    16b6:	89 89       	ldd	r24, Y+17	; 0x11
    16b8:	9a 89       	ldd	r25, Y+18	; 0x12
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <LCD_displayCharacter+0x2a4>
    16be:	9a 8b       	std	Y+18, r25	; 0x12
    16c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c2:	8b 89       	ldd	r24, Y+19	; 0x13
    16c4:	9c 89       	ldd	r25, Y+20	; 0x14
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	9c 8b       	std	Y+20, r25	; 0x14
    16ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16cc:	8b 89       	ldd	r24, Y+19	; 0x13
    16ce:	9c 89       	ldd	r25, Y+20	; 0x14
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	69 f7       	brne	.-38     	; 0x16ae <LCD_displayCharacter+0x298>
    16d4:	14 c0       	rjmp	.+40     	; 0x16fe <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d6:	6d 89       	ldd	r22, Y+21	; 0x15
    16d8:	7e 89       	ldd	r23, Y+22	; 0x16
    16da:	8f 89       	ldd	r24, Y+23	; 0x17
    16dc:	98 8d       	ldd	r25, Y+24	; 0x18
    16de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9c 8b       	std	Y+20, r25	; 0x14
    16e8:	8b 8b       	std	Y+19, r24	; 0x13
    16ea:	8b 89       	ldd	r24, Y+19	; 0x13
    16ec:	9c 89       	ldd	r25, Y+20	; 0x14
    16ee:	98 8b       	std	Y+16, r25	; 0x10
    16f0:	8f 87       	std	Y+15, r24	; 0x0f
    16f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f4:	98 89       	ldd	r25, Y+16	; 0x10
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <LCD_displayCharacter+0x2e0>
    16fa:	98 8b       	std	Y+16, r25	; 0x10
    16fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	GPIO_writePin(COMMAND_LINE, E_ID, LOGIC_LOW);//CLEAR ENABLE
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	62 e0       	ldi	r22, 0x02	; 2
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePin>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 e8       	ldi	r26, 0x80	; 128
    170e:	bf e3       	ldi	r27, 0x3F	; 63
    1710:	8b 87       	std	Y+11, r24	; 0x0b
    1712:	9c 87       	std	Y+12, r25	; 0x0c
    1714:	ad 87       	std	Y+13, r26	; 0x0d
    1716:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1718:	6b 85       	ldd	r22, Y+11	; 0x0b
    171a:	7c 85       	ldd	r23, Y+12	; 0x0c
    171c:	8d 85       	ldd	r24, Y+13	; 0x0d
    171e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a e7       	ldi	r20, 0x7A	; 122
    1726:	53 e4       	ldi	r21, 0x43	; 67
    1728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	8f 83       	std	Y+7, r24	; 0x07
    1732:	98 87       	std	Y+8, r25	; 0x08
    1734:	a9 87       	std	Y+9, r26	; 0x09
    1736:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1738:	6f 81       	ldd	r22, Y+7	; 0x07
    173a:	78 85       	ldd	r23, Y+8	; 0x08
    173c:	89 85       	ldd	r24, Y+9	; 0x09
    173e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e8       	ldi	r20, 0x80	; 128
    1746:	5f e3       	ldi	r21, 0x3F	; 63
    1748:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    174c:	88 23       	and	r24, r24
    174e:	2c f4       	brge	.+10     	; 0x175a <LCD_displayCharacter+0x344>
		__ticks = 1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9e 83       	std	Y+6, r25	; 0x06
    1756:	8d 83       	std	Y+5, r24	; 0x05
    1758:	3f c0       	rjmp	.+126    	; 0x17d8 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    175a:	6f 81       	ldd	r22, Y+7	; 0x07
    175c:	78 85       	ldd	r23, Y+8	; 0x08
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	9a 85       	ldd	r25, Y+10	; 0x0a
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	3f ef       	ldi	r19, 0xFF	; 255
    1766:	4f e7       	ldi	r20, 0x7F	; 127
    1768:	57 e4       	ldi	r21, 0x47	; 71
    176a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    176e:	18 16       	cp	r1, r24
    1770:	4c f5       	brge	.+82     	; 0x17c4 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1772:	6b 85       	ldd	r22, Y+11	; 0x0b
    1774:	7c 85       	ldd	r23, Y+12	; 0x0c
    1776:	8d 85       	ldd	r24, Y+13	; 0x0d
    1778:	9e 85       	ldd	r25, Y+14	; 0x0e
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	51 e4       	ldi	r21, 0x41	; 65
    1782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <LCD_displayCharacter+0x3a4>
    179c:	89 e1       	ldi	r24, 0x19	; 25
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	9c 83       	std	Y+4, r25	; 0x04
    17a2:	8b 83       	std	Y+3, r24	; 0x03
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_displayCharacter+0x392>
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b0:	8d 81       	ldd	r24, Y+5	; 0x05
    17b2:	9e 81       	ldd	r25, Y+6	; 0x06
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	9e 83       	std	Y+6, r25	; 0x06
    17b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	9e 81       	ldd	r25, Y+6	; 0x06
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	69 f7       	brne	.-38     	; 0x179c <LCD_displayCharacter+0x386>
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c4:	6f 81       	ldd	r22, Y+7	; 0x07
    17c6:	78 85       	ldd	r23, Y+8	; 0x08
    17c8:	89 85       	ldd	r24, Y+9	; 0x09
    17ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    17cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	8d 81       	ldd	r24, Y+5	; 0x05
    17da:	9e 81       	ldd	r25, Y+6	; 0x06
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <LCD_displayCharacter+0x3ce>
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    17ec:	e9 96       	adiw	r28, 0x39	; 57
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <LCD_displayString>:
void LCD_displayString(const char *string) {/*FUNCTION TO DISPLAY STRING CHAR BY CHAR*/
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <LCD_displayString+0x6>
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	9b 83       	std	Y+3, r25	; 0x03
    180c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    180e:	19 82       	std	Y+1, r1	; 0x01
    1810:	0e c0       	rjmp	.+28     	; 0x182e <LCD_displayString+0x30>
	while (string[i] != '\0') {
		LCD_displayCharacter(string[i]);
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	9b 81       	ldd	r25, Y+3	; 0x03
    181c:	fc 01       	movw	r30, r24
    181e:	e2 0f       	add	r30, r18
    1820:	f3 1f       	adc	r31, r19
    1822:	80 81       	ld	r24, Z
    1824:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_displayCharacter>
		i++;
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	8f 5f       	subi	r24, 0xFF	; 255
    182c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(COMMAND_LINE, E_ID, LOGIC_LOW);//CLEAR ENABLE
	_delay_ms(1);
}
void LCD_displayString(const char *string) {/*FUNCTION TO DISPLAY STRING CHAR BY CHAR*/
	uint8 i = 0;
	while (string[i] != '\0') {
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	9b 81       	ldd	r25, Y+3	; 0x03
    1838:	fc 01       	movw	r30, r24
    183a:	e2 0f       	add	r30, r18
    183c:	f3 1f       	adc	r31, r19
    183e:	80 81       	ld	r24, Z
    1840:	88 23       	and	r24, r24
    1842:	39 f7       	brne	.-50     	; 0x1812 <LCD_displayString+0x14>
		LCD_displayCharacter(string[i]);
		i++;
	}

}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <LCD_moveCursor>:
void LCD_moveCursor(uint8 r, uint8 c) {/*FUNCTION TO MOVE CURSOR TO SPECIFIC LOCATION USING ROW AND COLUMN*/
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <LCD_moveCursor+0x6>
    1856:	00 d0       	rcall	.+0      	; 0x1858 <LCD_moveCursor+0x8>
    1858:	0f 92       	push	r0
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	8a 83       	std	Y+2, r24	; 0x02
    1860:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_address = 0;
    1862:	19 82       	std	Y+1, r1	; 0x01
	switch (r) {
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	3d 83       	std	Y+5, r19	; 0x05
    186c:	2c 83       	std	Y+4, r18	; 0x04
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	9d 81       	ldd	r25, Y+5	; 0x05
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	91 05       	cpc	r25, r1
    1876:	c1 f0       	breq	.+48     	; 0x18a8 <LCD_moveCursor+0x58>
    1878:	2c 81       	ldd	r18, Y+4	; 0x04
    187a:	3d 81       	ldd	r19, Y+5	; 0x05
    187c:	22 30       	cpi	r18, 0x02	; 2
    187e:	31 05       	cpc	r19, r1
    1880:	2c f4       	brge	.+10     	; 0x188c <LCD_moveCursor+0x3c>
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	61 f0       	breq	.+24     	; 0x18a2 <LCD_moveCursor+0x52>
    188a:	19 c0       	rjmp	.+50     	; 0x18be <LCD_moveCursor+0x6e>
    188c:	2c 81       	ldd	r18, Y+4	; 0x04
    188e:	3d 81       	ldd	r19, Y+5	; 0x05
    1890:	22 30       	cpi	r18, 0x02	; 2
    1892:	31 05       	cpc	r19, r1
    1894:	69 f0       	breq	.+26     	; 0x18b0 <LCD_moveCursor+0x60>
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	9d 81       	ldd	r25, Y+5	; 0x05
    189a:	83 30       	cpi	r24, 0x03	; 3
    189c:	91 05       	cpc	r25, r1
    189e:	61 f0       	breq	.+24     	; 0x18b8 <LCD_moveCursor+0x68>
    18a0:	0e c0       	rjmp	.+28     	; 0x18be <LCD_moveCursor+0x6e>
	case 0:
		LCD_address = c;
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	0b c0       	rjmp	.+22     	; 0x18be <LCD_moveCursor+0x6e>
		break;
	case 1:
		LCD_address = c + 0x40;
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	80 5c       	subi	r24, 0xC0	; 192
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	07 c0       	rjmp	.+14     	; 0x18be <LCD_moveCursor+0x6e>
		break;
	case 2:
		LCD_address = c + 0x10;
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	80 5f       	subi	r24, 0xF0	; 240
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <LCD_moveCursor+0x6e>
		break;
	case 3:
		LCD_address = c + 0x50;
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	80 5b       	subi	r24, 0xB0	; 176
    18bc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_address | LCD_SET_CURSOR_LOCATION);
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	80 68       	ori	r24, 0x80	; 128
    18c2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <LCD_sendCommand>
}
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 r, uint8 c, const char *string) {/*DISPLAY STRING STARTING FROM A SPECIFIC LOCATION USING ROW AND COLUMN*/
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	00 d0       	rcall	.+0      	; 0x18dc <LCD_displayStringRowColumn+0x6>
    18dc:	00 d0       	rcall	.+0      	; 0x18de <LCD_displayStringRowColumn+0x8>
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	6a 83       	std	Y+2, r22	; 0x02
    18e6:	5c 83       	std	Y+4, r21	; 0x04
    18e8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(r, c);
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	6a 81       	ldd	r22, Y+2	; 0x02
    18ee:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_moveCursor>
	LCD_displayString(string);
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <LCD_displayString>
}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <LCD_clearScreen>:
void LCD_clearScreen() {/*FUNCTION TO CLEAR DISPLAY*/
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <LCD_sendCommand>
}
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <LCD_integerToString>:
void LCD_integerToString(int data) {/*FUNCTION TO DISPLAY INTEGER RESULTS*/
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	62 97       	sbiw	r28, 0x12	; 18
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	9a 8b       	std	Y+18, r25	; 0x12
    1932:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(data, buffer, 10);
    1934:	89 89       	ldd	r24, Y+17	; 0x11
    1936:	9a 89       	ldd	r25, Y+18	; 0x12
    1938:	9e 01       	movw	r18, r28
    193a:	2f 5f       	subi	r18, 0xFF	; 255
    193c:	3f 4f       	sbci	r19, 0xFF	; 255
    193e:	b9 01       	movw	r22, r18
    1940:	4a e0       	ldi	r20, 0x0A	; 10
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	0e 94 c7 11 	call	0x238e	; 0x238e <itoa>
	LCD_displayString(buffer);
    1948:	ce 01       	movw	r24, r28
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <LCD_displayString>

}
    1950:	62 96       	adiw	r28, 0x12	; 18
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <Ultrasonic_Init>:
 * Ultrasonic_Init:
 * setup PINB5 for output to trigger the sensor
 * Configure ICU with F_CPU/8 clock and interrupt on rising edge
 * set Ultrasonic_edgeProcessing as the call back function
 * */
void Ultrasonic_Init(){
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <Ultrasonic_Init+0x6>
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(TRIGGER_PORT,TRIGGER_PIN,PIN_OUTPUT);
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	65 e0       	ldi	r22, 0x05	; 5
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <GPIO_setupPinDirection>
	ICU_ConfigType Config = {PRE8,RISING};
    1976:	82 e0       	ldi	r24, 0x02	; 2
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	8a 83       	std	Y+2, r24	; 0x02
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    197e:	84 ee       	ldi	r24, 0xE4	; 228
    1980:	9d e0       	ldi	r25, 0x0D	; 13
    1982:	0e 94 91 07 	call	0xf22	; 0xf22 <ICU_setCallBack>
	ICU_init(&Config);
    1986:	ce 01       	movw	r24, r28
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	0e 94 4a 07 	call	0xe94	; 0xe94 <ICU_init>

}
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <Ultrasonic_Trigger>:
 * trigger the sensor with a pulse with duration of 10 us
 *
 */


void Ultrasonic_Trigger(){
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	68 97       	sbiw	r28, 0x18	; 24
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(TRIGGER_PORT,TRIGGER_PIN,LOGIC_HIGH);
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	65 e0       	ldi	r22, 0x05	; 5
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePin>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e2       	ldi	r26, 0x20	; 32
    19bc:	b1 e4       	ldi	r27, 0x41	; 65
    19be:	8d 8b       	std	Y+21, r24	; 0x15
    19c0:	9e 8b       	std	Y+22, r25	; 0x16
    19c2:	af 8b       	std	Y+23, r26	; 0x17
    19c4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19c6:	6d 89       	ldd	r22, Y+21	; 0x15
    19c8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ca:	8f 89       	ldd	r24, Y+23	; 0x17
    19cc:	98 8d       	ldd	r25, Y+24	; 0x18
    19ce:	2b ea       	ldi	r18, 0xAB	; 171
    19d0:	3a ea       	ldi	r19, 0xAA	; 170
    19d2:	4a ea       	ldi	r20, 0xAA	; 170
    19d4:	5e e3       	ldi	r21, 0x3E	; 62
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	89 8b       	std	Y+17, r24	; 0x11
    19e0:	9a 8b       	std	Y+18, r25	; 0x12
    19e2:	ab 8b       	std	Y+19, r26	; 0x13
    19e4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19e6:	69 89       	ldd	r22, Y+17	; 0x11
    19e8:	7a 89       	ldd	r23, Y+18	; 0x12
    19ea:	8b 89       	ldd	r24, Y+19	; 0x13
    19ec:	9c 89       	ldd	r25, Y+20	; 0x14
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e8       	ldi	r20, 0x80	; 128
    19f4:	5f e3       	ldi	r21, 0x3F	; 63
    19f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19fa:	88 23       	and	r24, r24
    19fc:	1c f4       	brge	.+6      	; 0x1a04 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	88 8b       	std	Y+16, r24	; 0x10
    1a02:	91 c0       	rjmp	.+290    	; 0x1b26 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1a04:	69 89       	ldd	r22, Y+17	; 0x11
    1a06:	7a 89       	ldd	r23, Y+18	; 0x12
    1a08:	8b 89       	ldd	r24, Y+19	; 0x13
    1a0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	53 e4       	ldi	r21, 0x43	; 67
    1a14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	0c f0       	brlt	.+2      	; 0x1a1e <Ultrasonic_Trigger+0x86>
    1a1c:	7b c0       	rjmp	.+246    	; 0x1b14 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1a1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a20:	7e 89       	ldd	r23, Y+22	; 0x16
    1a22:	8f 89       	ldd	r24, Y+23	; 0x17
    1a24:	98 8d       	ldd	r25, Y+24	; 0x18
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	54 e4       	ldi	r21, 0x44	; 68
    1a2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8c 87       	std	Y+12, r24	; 0x0c
    1a38:	9d 87       	std	Y+13, r25	; 0x0d
    1a3a:	ae 87       	std	Y+14, r26	; 0x0e
    1a3c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a40:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a42:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a44:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a e7       	ldi	r20, 0x7A	; 122
    1a4c:	53 e4       	ldi	r21, 0x43	; 67
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	88 87       	std	Y+8, r24	; 0x08
    1a58:	99 87       	std	Y+9, r25	; 0x09
    1a5a:	aa 87       	std	Y+10, r26	; 0x0a
    1a5c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a5e:	68 85       	ldd	r22, Y+8	; 0x08
    1a60:	79 85       	ldd	r23, Y+9	; 0x09
    1a62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9f 83       	std	Y+7, r25	; 0x07
    1a7c:	8e 83       	std	Y+6, r24	; 0x06
    1a7e:	3f c0       	rjmp	.+126    	; 0x1afe <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1a80:	68 85       	ldd	r22, Y+8	; 0x08
    1a82:	79 85       	ldd	r23, Y+9	; 0x09
    1a84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	4f e7       	ldi	r20, 0x7F	; 127
    1a8e:	57 e4       	ldi	r21, 0x47	; 71
    1a90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	4c f5       	brge	.+82     	; 0x1aea <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a98:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a9a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9f 83       	std	Y+7, r25	; 0x07
    1abe:	8e 83       	std	Y+6, r24	; 0x06
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <Ultrasonic_Trigger+0x148>
    1ac2:	89 e1       	ldi	r24, 0x19	; 25
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9d 83       	std	Y+5, r25	; 0x05
    1ac8:	8c 83       	std	Y+4, r24	; 0x04
    1aca:	8c 81       	ldd	r24, Y+4	; 0x04
    1acc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <Ultrasonic_Trigger+0x136>
    1ad2:	9d 83       	std	Y+5, r25	; 0x05
    1ad4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad8:	9f 81       	ldd	r25, Y+7	; 0x07
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	9f 83       	std	Y+7, r25	; 0x07
    1ade:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	69 f7       	brne	.-38     	; 0x1ac2 <Ultrasonic_Trigger+0x12a>
    1ae8:	24 c0       	rjmp	.+72     	; 0x1b32 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	68 85       	ldd	r22, Y+8	; 0x08
    1aec:	79 85       	ldd	r23, Y+9	; 0x09
    1aee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9f 83       	std	Y+7, r25	; 0x07
    1afc:	8e 83       	std	Y+6, r24	; 0x06
    1afe:	8e 81       	ldd	r24, Y+6	; 0x06
    1b00:	9f 81       	ldd	r25, Y+7	; 0x07
    1b02:	9b 83       	std	Y+3, r25	; 0x03
    1b04:	8a 83       	std	Y+2, r24	; 0x02
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <Ultrasonic_Trigger+0x172>
    1b0e:	9b 83       	std	Y+3, r25	; 0x03
    1b10:	8a 83       	std	Y+2, r24	; 0x02
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b14:	69 89       	ldd	r22, Y+17	; 0x11
    1b16:	7a 89       	ldd	r23, Y+18	; 0x12
    1b18:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	88 8b       	std	Y+16, r24	; 0x10
    1b26:	88 89       	ldd	r24, Y+16	; 0x10
    1b28:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	8a 95       	dec	r24
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <Ultrasonic_Trigger+0x194>
    1b30:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(TRIGGER_PORT,TRIGGER_PIN,LOGIC_LOW);
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	65 e0       	ldi	r22, 0x05	; 5
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePin>
}
    1b3c:	68 96       	adiw	r28, 0x18	; 24
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <Ultrasonic_readDistance>:


/*
 * Calculate the distance given the time taken by echo to travel from and to the sensor
 * */
uint16 Ultrasonic_readDistance(){
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <Ultrasonic_readDistance+0x6>
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <Ultrasonic_readDistance+0x8>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62

	uint32 distance = 0;
    1b5a:	19 82       	std	Y+1, r1	; 0x01
    1b5c:	1a 82       	std	Y+2, r1	; 0x02
    1b5e:	1b 82       	std	Y+3, r1	; 0x03
    1b60:	1c 82       	std	Y+4, r1	; 0x04
	Ultrasonic_Trigger();
    1b62:	0e 94 cc 0c 	call	0x1998	; 0x1998 <Ultrasonic_Trigger>

	if(edgecounts == 2)
    1b66:	80 91 78 01 	lds	r24, 0x0178
    1b6a:	82 30       	cpi	r24, 0x02	; 2
    1b6c:	11 f4       	brne	.+4      	; 0x1b72 <Ultrasonic_readDistance+0x24>
	{
		edgecounts = 0;
    1b6e:	10 92 78 01 	sts	0x0178, r1
	}
	distance = echo_time/58.8;
    1b72:	80 91 79 01 	lds	r24, 0x0179
    1b76:	90 91 7a 01 	lds	r25, 0x017A
    1b7a:	a0 91 7b 01 	lds	r26, 0x017B
    1b7e:	b0 91 7c 01 	lds	r27, 0x017C
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	23 e3       	ldi	r18, 0x33	; 51
    1b94:	33 e3       	ldi	r19, 0x33	; 51
    1b96:	4b e6       	ldi	r20, 0x6B	; 107
    1b98:	52 e4       	ldi	r21, 0x42	; 66
    1b9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	9a 83       	std	Y+2, r25	; 0x02
    1bb2:	ab 83       	std	Y+3, r26	; 0x03
    1bb4:	bc 83       	std	Y+4, r27	; 0x04
	return distance;
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <Ultrasonic_edgeProcessing>:
 * process the edge events
 * on first rising edge start the timer count and set the next interrupt event to be falling edge
 *
 * on falling edge store the value of timer and start another timer count with interrupt event on rising edge
 * */
void Ultrasonic_edgeProcessing(){
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	edgecounts++;
    1bd0:	80 91 78 01 	lds	r24, 0x0178
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	80 93 78 01 	sts	0x0178, r24
	if(edgecounts == 1){
    1bda:	80 91 78 01 	lds	r24, 0x0178
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	31 f4       	brne	.+12     	; 0x1bee <Ultrasonic_edgeProcessing+0x26>
		ICU_clearTimerValue();
    1be2:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(FALLING);
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	0e 94 a3 07 	call	0xf46	; 0xf46 <ICU_setEdgeDetectionType>
    1bec:	16 c0       	rjmp	.+44     	; 0x1c1a <Ultrasonic_edgeProcessing+0x52>
	}
	else if(edgecounts == 2){
    1bee:	80 91 78 01 	lds	r24, 0x0178
    1bf2:	82 30       	cpi	r24, 0x02	; 2
    1bf4:	91 f4       	brne	.+36     	; 0x1c1a <Ultrasonic_edgeProcessing+0x52>
		echo_time = ICU_getICUvalue();
    1bf6:	0e 94 c2 07 	call	0xf84	; 0xf84 <ICU_getICUvalue>
    1bfa:	cc 01       	movw	r24, r24
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	80 93 79 01 	sts	0x0179, r24
    1c04:	90 93 7a 01 	sts	0x017A, r25
    1c08:	a0 93 7b 01 	sts	0x017B, r26
    1c0c:	b0 93 7c 01 	sts	0x017C, r27
		ICU_clearTimerValue();
    1c10:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(RISING);
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	0e 94 a3 07 	call	0xf46	; 0xf46 <ICU_setEdgeDetectionType>

	}

}
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <GPIO_setupPinDirection+0x6>
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <GPIO_setupPinDirection+0x8>
    1c28:	0f 92       	push	r0
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	6a 83       	std	Y+2, r22	; 0x02
    1c32:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	88 30       	cpi	r24, 0x08	; 8
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <GPIO_setupPinDirection+0x1c>
    1c3a:	d5 c0       	rjmp	.+426    	; 0x1de6 <GPIO_setupPinDirection+0x1c6>
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	84 30       	cpi	r24, 0x04	; 4
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <GPIO_setupPinDirection+0x24>
    1c42:	d1 c0       	rjmp	.+418    	; 0x1de6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	3d 83       	std	Y+5, r19	; 0x05
    1c4c:	2c 83       	std	Y+4, r18	; 0x04
    1c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c50:	9d 81       	ldd	r25, Y+5	; 0x05
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	91 05       	cpc	r25, r1
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <GPIO_setupPinDirection+0x3a>
    1c58:	43 c0       	rjmp	.+134    	; 0x1ce0 <GPIO_setupPinDirection+0xc0>
    1c5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5e:	22 30       	cpi	r18, 0x02	; 2
    1c60:	31 05       	cpc	r19, r1
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <GPIO_setupPinDirection+0x4e>
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
    1c66:	9d 81       	ldd	r25, Y+5	; 0x05
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	71 f0       	breq	.+28     	; 0x1c88 <GPIO_setupPinDirection+0x68>
    1c6c:	bc c0       	rjmp	.+376    	; 0x1de6 <GPIO_setupPinDirection+0x1c6>
    1c6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c70:	3d 81       	ldd	r19, Y+5	; 0x05
    1c72:	22 30       	cpi	r18, 0x02	; 2
    1c74:	31 05       	cpc	r19, r1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <GPIO_setupPinDirection+0x5a>
    1c78:	5f c0       	rjmp	.+190    	; 0x1d38 <GPIO_setupPinDirection+0x118>
    1c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7e:	83 30       	cpi	r24, 0x03	; 3
    1c80:	91 05       	cpc	r25, r1
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <GPIO_setupPinDirection+0x66>
    1c84:	85 c0       	rjmp	.+266    	; 0x1d90 <GPIO_setupPinDirection+0x170>
    1c86:	af c0       	rjmp	.+350    	; 0x1de6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	81 30       	cpi	r24, 0x01	; 1
    1c8c:	a1 f4       	brne	.+40     	; 0x1cb6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c8e:	aa e3       	ldi	r26, 0x3A	; 58
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ea e3       	ldi	r30, 0x3A	; 58
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	48 2f       	mov	r20, r24
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	02 2e       	mov	r0, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <GPIO_setupPinDirection+0x8c>
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	0a 94       	dec	r0
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <GPIO_setupPinDirection+0x88>
    1cb0:	84 2b       	or	r24, r20
    1cb2:	8c 93       	st	X, r24
    1cb4:	98 c0       	rjmp	.+304    	; 0x1de6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1cb6:	aa e3       	ldi	r26, 0x3A	; 58
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	ea e3       	ldi	r30, 0x3A	; 58
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	48 2f       	mov	r20, r24
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 2e       	mov	r0, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <GPIO_setupPinDirection+0xb4>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	0a 94       	dec	r0
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <GPIO_setupPinDirection+0xb0>
    1cd8:	80 95       	com	r24
    1cda:	84 23       	and	r24, r20
    1cdc:	8c 93       	st	X, r24
    1cde:	83 c0       	rjmp	.+262    	; 0x1de6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	a1 f4       	brne	.+40     	; 0x1d0e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1ce6:	a7 e3       	ldi	r26, 0x37	; 55
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e7 e3       	ldi	r30, 0x37	; 55
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <GPIO_setupPinDirection+0xe4>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <GPIO_setupPinDirection+0xe0>
    1d08:	84 2b       	or	r24, r20
    1d0a:	8c 93       	st	X, r24
    1d0c:	6c c0       	rjmp	.+216    	; 0x1de6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d0e:	a7 e3       	ldi	r26, 0x37	; 55
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e7 e3       	ldi	r30, 0x37	; 55
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	48 2f       	mov	r20, r24
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	02 2e       	mov	r0, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <GPIO_setupPinDirection+0x10c>
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	0a 94       	dec	r0
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <GPIO_setupPinDirection+0x108>
    1d30:	80 95       	com	r24
    1d32:	84 23       	and	r24, r20
    1d34:	8c 93       	st	X, r24
    1d36:	57 c0       	rjmp	.+174    	; 0x1de6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	a1 f4       	brne	.+40     	; 0x1d66 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d3e:	a4 e3       	ldi	r26, 0x34	; 52
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e4 e3       	ldi	r30, 0x34	; 52
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 2e       	mov	r0, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <GPIO_setupPinDirection+0x13c>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <GPIO_setupPinDirection+0x138>
    1d60:	84 2b       	or	r24, r20
    1d62:	8c 93       	st	X, r24
    1d64:	40 c0       	rjmp	.+128    	; 0x1de6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d66:	a4 e3       	ldi	r26, 0x34	; 52
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e4 e3       	ldi	r30, 0x34	; 52
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	48 2f       	mov	r20, r24
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 2e       	mov	r0, r18
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <GPIO_setupPinDirection+0x164>
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	0a 94       	dec	r0
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <GPIO_setupPinDirection+0x160>
    1d88:	80 95       	com	r24
    1d8a:	84 23       	and	r24, r20
    1d8c:	8c 93       	st	X, r24
    1d8e:	2b c0       	rjmp	.+86     	; 0x1de6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	a1 f4       	brne	.+40     	; 0x1dbe <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d96:	a1 e3       	ldi	r26, 0x31	; 49
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e1 e3       	ldi	r30, 0x31	; 49
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 2e       	mov	r0, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <GPIO_setupPinDirection+0x194>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <GPIO_setupPinDirection+0x190>
    1db8:	84 2b       	or	r24, r20
    1dba:	8c 93       	st	X, r24
    1dbc:	14 c0       	rjmp	.+40     	; 0x1de6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1dbe:	a1 e3       	ldi	r26, 0x31	; 49
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e1 e3       	ldi	r30, 0x31	; 49
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	48 2f       	mov	r20, r24
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	02 2e       	mov	r0, r18
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <GPIO_setupPinDirection+0x1bc>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	0a 94       	dec	r0
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <GPIO_setupPinDirection+0x1b8>
    1de0:	80 95       	com	r24
    1de2:	84 23       	and	r24, r20
    1de4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <GPIO_writePin+0x6>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <GPIO_writePin+0x8>
    1dfe:	0f 92       	push	r0
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	6a 83       	std	Y+2, r22	; 0x02
    1e08:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	88 30       	cpi	r24, 0x08	; 8
    1e0e:	08 f0       	brcs	.+2      	; 0x1e12 <GPIO_writePin+0x1c>
    1e10:	d5 c0       	rjmp	.+426    	; 0x1fbc <GPIO_writePin+0x1c6>
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	84 30       	cpi	r24, 0x04	; 4
    1e16:	08 f0       	brcs	.+2      	; 0x1e1a <GPIO_writePin+0x24>
    1e18:	d1 c0       	rjmp	.+418    	; 0x1fbc <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	3d 83       	std	Y+5, r19	; 0x05
    1e22:	2c 83       	std	Y+4, r18	; 0x04
    1e24:	8c 81       	ldd	r24, Y+4	; 0x04
    1e26:	9d 81       	ldd	r25, Y+5	; 0x05
    1e28:	81 30       	cpi	r24, 0x01	; 1
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <GPIO_writePin+0x3a>
    1e2e:	43 c0       	rjmp	.+134    	; 0x1eb6 <GPIO_writePin+0xc0>
    1e30:	2c 81       	ldd	r18, Y+4	; 0x04
    1e32:	3d 81       	ldd	r19, Y+5	; 0x05
    1e34:	22 30       	cpi	r18, 0x02	; 2
    1e36:	31 05       	cpc	r19, r1
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <GPIO_writePin+0x4e>
    1e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	71 f0       	breq	.+28     	; 0x1e5e <GPIO_writePin+0x68>
    1e42:	bc c0       	rjmp	.+376    	; 0x1fbc <GPIO_writePin+0x1c6>
    1e44:	2c 81       	ldd	r18, Y+4	; 0x04
    1e46:	3d 81       	ldd	r19, Y+5	; 0x05
    1e48:	22 30       	cpi	r18, 0x02	; 2
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <GPIO_writePin+0x5a>
    1e4e:	5f c0       	rjmp	.+190    	; 0x1f0e <GPIO_writePin+0x118>
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	9d 81       	ldd	r25, Y+5	; 0x05
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	91 05       	cpc	r25, r1
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <GPIO_writePin+0x66>
    1e5a:	85 c0       	rjmp	.+266    	; 0x1f66 <GPIO_writePin+0x170>
    1e5c:	af c0       	rjmp	.+350    	; 0x1fbc <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	a1 f4       	brne	.+40     	; 0x1e8c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e64:	ab e3       	ldi	r26, 0x3B	; 59
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	eb e3       	ldi	r30, 0x3B	; 59
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	48 2f       	mov	r20, r24
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	02 2e       	mov	r0, r18
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <GPIO_writePin+0x8c>
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	0a 94       	dec	r0
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <GPIO_writePin+0x88>
    1e86:	84 2b       	or	r24, r20
    1e88:	8c 93       	st	X, r24
    1e8a:	98 c0       	rjmp	.+304    	; 0x1fbc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e8c:	ab e3       	ldi	r26, 0x3B	; 59
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	eb e3       	ldi	r30, 0x3B	; 59
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	48 2f       	mov	r20, r24
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	02 2e       	mov	r0, r18
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <GPIO_writePin+0xb4>
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	0a 94       	dec	r0
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <GPIO_writePin+0xb0>
    1eae:	80 95       	com	r24
    1eb0:	84 23       	and	r24, r20
    1eb2:	8c 93       	st	X, r24
    1eb4:	83 c0       	rjmp	.+262    	; 0x1fbc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	a1 f4       	brne	.+40     	; 0x1ee4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ebc:	a8 e3       	ldi	r26, 0x38	; 56
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e8 e3       	ldi	r30, 0x38	; 56
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	48 2f       	mov	r20, r24
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <GPIO_writePin+0xe4>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <GPIO_writePin+0xe0>
    1ede:	84 2b       	or	r24, r20
    1ee0:	8c 93       	st	X, r24
    1ee2:	6c c0       	rjmp	.+216    	; 0x1fbc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1ee4:	a8 e3       	ldi	r26, 0x38	; 56
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e8 e3       	ldi	r30, 0x38	; 56
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	48 2f       	mov	r20, r24
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 2e       	mov	r0, r18
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <GPIO_writePin+0x10c>
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	0a 94       	dec	r0
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <GPIO_writePin+0x108>
    1f06:	80 95       	com	r24
    1f08:	84 23       	and	r24, r20
    1f0a:	8c 93       	st	X, r24
    1f0c:	57 c0       	rjmp	.+174    	; 0x1fbc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	a1 f4       	brne	.+40     	; 0x1f3c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f14:	a5 e3       	ldi	r26, 0x35	; 53
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e5 e3       	ldi	r30, 0x35	; 53
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	48 2f       	mov	r20, r24
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 2e       	mov	r0, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <GPIO_writePin+0x13c>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	0a 94       	dec	r0
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <GPIO_writePin+0x138>
    1f36:	84 2b       	or	r24, r20
    1f38:	8c 93       	st	X, r24
    1f3a:	40 c0       	rjmp	.+128    	; 0x1fbc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f3c:	a5 e3       	ldi	r26, 0x35	; 53
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e5 e3       	ldi	r30, 0x35	; 53
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	48 2f       	mov	r20, r24
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 2e       	mov	r0, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <GPIO_writePin+0x164>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	0a 94       	dec	r0
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <GPIO_writePin+0x160>
    1f5e:	80 95       	com	r24
    1f60:	84 23       	and	r24, r20
    1f62:	8c 93       	st	X, r24
    1f64:	2b c0       	rjmp	.+86     	; 0x1fbc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	a1 f4       	brne	.+40     	; 0x1f94 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f6c:	a2 e3       	ldi	r26, 0x32	; 50
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e2 e3       	ldi	r30, 0x32	; 50
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	48 2f       	mov	r20, r24
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	02 2e       	mov	r0, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <GPIO_writePin+0x194>
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	0a 94       	dec	r0
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <GPIO_writePin+0x190>
    1f8e:	84 2b       	or	r24, r20
    1f90:	8c 93       	st	X, r24
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f94:	a2 e3       	ldi	r26, 0x32	; 50
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e2 e3       	ldi	r30, 0x32	; 50
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	48 2f       	mov	r20, r24
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	02 2e       	mov	r0, r18
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <GPIO_writePin+0x1bc>
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	0a 94       	dec	r0
    1fb4:	e2 f7       	brpl	.-8      	; 0x1fae <GPIO_writePin+0x1b8>
    1fb6:	80 95       	com	r24
    1fb8:	84 23       	and	r24, r20
    1fba:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <GPIO_readPin+0x6>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <GPIO_readPin+0x8>
    1fd4:	0f 92       	push	r0
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	8a 83       	std	Y+2, r24	; 0x02
    1fdc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1fde:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	88 30       	cpi	r24, 0x08	; 8
    1fe4:	08 f0       	brcs	.+2      	; 0x1fe8 <GPIO_readPin+0x1c>
    1fe6:	84 c0       	rjmp	.+264    	; 0x20f0 <GPIO_readPin+0x124>
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	84 30       	cpi	r24, 0x04	; 4
    1fec:	08 f0       	brcs	.+2      	; 0x1ff0 <GPIO_readPin+0x24>
    1fee:	80 c0       	rjmp	.+256    	; 0x20f0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	3d 83       	std	Y+5, r19	; 0x05
    1ff8:	2c 83       	std	Y+4, r18	; 0x04
    1ffa:	4c 81       	ldd	r20, Y+4	; 0x04
    1ffc:	5d 81       	ldd	r21, Y+5	; 0x05
    1ffe:	41 30       	cpi	r20, 0x01	; 1
    2000:	51 05       	cpc	r21, r1
    2002:	79 f1       	breq	.+94     	; 0x2062 <GPIO_readPin+0x96>
    2004:	8c 81       	ldd	r24, Y+4	; 0x04
    2006:	9d 81       	ldd	r25, Y+5	; 0x05
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	91 05       	cpc	r25, r1
    200c:	34 f4       	brge	.+12     	; 0x201a <GPIO_readPin+0x4e>
    200e:	2c 81       	ldd	r18, Y+4	; 0x04
    2010:	3d 81       	ldd	r19, Y+5	; 0x05
    2012:	21 15       	cp	r18, r1
    2014:	31 05       	cpc	r19, r1
    2016:	69 f0       	breq	.+26     	; 0x2032 <GPIO_readPin+0x66>
    2018:	6b c0       	rjmp	.+214    	; 0x20f0 <GPIO_readPin+0x124>
    201a:	4c 81       	ldd	r20, Y+4	; 0x04
    201c:	5d 81       	ldd	r21, Y+5	; 0x05
    201e:	42 30       	cpi	r20, 0x02	; 2
    2020:	51 05       	cpc	r21, r1
    2022:	b9 f1       	breq	.+110    	; 0x2092 <GPIO_readPin+0xc6>
    2024:	8c 81       	ldd	r24, Y+4	; 0x04
    2026:	9d 81       	ldd	r25, Y+5	; 0x05
    2028:	83 30       	cpi	r24, 0x03	; 3
    202a:	91 05       	cpc	r25, r1
    202c:	09 f4       	brne	.+2      	; 0x2030 <GPIO_readPin+0x64>
    202e:	49 c0       	rjmp	.+146    	; 0x20c2 <GPIO_readPin+0xf6>
    2030:	5f c0       	rjmp	.+190    	; 0x20f0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2032:	e9 e3       	ldi	r30, 0x39	; 57
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	88 2f       	mov	r24, r24
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a9 01       	movw	r20, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <GPIO_readPin+0x7e>
    2046:	55 95       	asr	r21
    2048:	47 95       	ror	r20
    204a:	8a 95       	dec	r24
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <GPIO_readPin+0x7a>
    204e:	ca 01       	movw	r24, r20
    2050:	81 70       	andi	r24, 0x01	; 1
    2052:	90 70       	andi	r25, 0x00	; 0
    2054:	88 23       	and	r24, r24
    2056:	19 f0       	breq	.+6      	; 0x205e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	49 c0       	rjmp	.+146    	; 0x20f0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    205e:	19 82       	std	Y+1, r1	; 0x01
    2060:	47 c0       	rjmp	.+142    	; 0x20f0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2062:	e6 e3       	ldi	r30, 0x36	; 54
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a9 01       	movw	r20, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <GPIO_readPin+0xae>
    2076:	55 95       	asr	r21
    2078:	47 95       	ror	r20
    207a:	8a 95       	dec	r24
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <GPIO_readPin+0xaa>
    207e:	ca 01       	movw	r24, r20
    2080:	81 70       	andi	r24, 0x01	; 1
    2082:	90 70       	andi	r25, 0x00	; 0
    2084:	88 23       	and	r24, r24
    2086:	19 f0       	breq	.+6      	; 0x208e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	31 c0       	rjmp	.+98     	; 0x20f0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    208e:	19 82       	std	Y+1, r1	; 0x01
    2090:	2f c0       	rjmp	.+94     	; 0x20f0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2092:	e3 e3       	ldi	r30, 0x33	; 51
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a9 01       	movw	r20, r18
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <GPIO_readPin+0xde>
    20a6:	55 95       	asr	r21
    20a8:	47 95       	ror	r20
    20aa:	8a 95       	dec	r24
    20ac:	e2 f7       	brpl	.-8      	; 0x20a6 <GPIO_readPin+0xda>
    20ae:	ca 01       	movw	r24, r20
    20b0:	81 70       	andi	r24, 0x01	; 1
    20b2:	90 70       	andi	r25, 0x00	; 0
    20b4:	88 23       	and	r24, r24
    20b6:	19 f0       	breq	.+6      	; 0x20be <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	19 c0       	rjmp	.+50     	; 0x20f0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20be:	19 82       	std	Y+1, r1	; 0x01
    20c0:	17 c0       	rjmp	.+46     	; 0x20f0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    20c2:	e0 e3       	ldi	r30, 0x30	; 48
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	a9 01       	movw	r20, r18
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <GPIO_readPin+0x10e>
    20d6:	55 95       	asr	r21
    20d8:	47 95       	ror	r20
    20da:	8a 95       	dec	r24
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <GPIO_readPin+0x10a>
    20de:	ca 01       	movw	r24, r20
    20e0:	81 70       	andi	r24, 0x01	; 1
    20e2:	90 70       	andi	r25, 0x00	; 0
    20e4:	88 23       	and	r24, r24
    20e6:	19 f0       	breq	.+6      	; 0x20ee <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	01 c0       	rjmp	.+2      	; 0x20f0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20ee:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <GPIO_setupPortDirection+0x6>
    2108:	00 d0       	rcall	.+0      	; 0x210a <GPIO_setupPortDirection+0x8>
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	84 30       	cpi	r24, 0x04	; 4
    2116:	90 f5       	brcc	.+100    	; 0x217c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	3c 83       	std	Y+4, r19	; 0x04
    2120:	2b 83       	std	Y+3, r18	; 0x03
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	9c 81       	ldd	r25, Y+4	; 0x04
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	91 05       	cpc	r25, r1
    212a:	d1 f0       	breq	.+52     	; 0x2160 <GPIO_setupPortDirection+0x5e>
    212c:	2b 81       	ldd	r18, Y+3	; 0x03
    212e:	3c 81       	ldd	r19, Y+4	; 0x04
    2130:	22 30       	cpi	r18, 0x02	; 2
    2132:	31 05       	cpc	r19, r1
    2134:	2c f4       	brge	.+10     	; 0x2140 <GPIO_setupPortDirection+0x3e>
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	61 f0       	breq	.+24     	; 0x2156 <GPIO_setupPortDirection+0x54>
    213e:	1e c0       	rjmp	.+60     	; 0x217c <GPIO_setupPortDirection+0x7a>
    2140:	2b 81       	ldd	r18, Y+3	; 0x03
    2142:	3c 81       	ldd	r19, Y+4	; 0x04
    2144:	22 30       	cpi	r18, 0x02	; 2
    2146:	31 05       	cpc	r19, r1
    2148:	81 f0       	breq	.+32     	; 0x216a <GPIO_setupPortDirection+0x68>
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	83 30       	cpi	r24, 0x03	; 3
    2150:	91 05       	cpc	r25, r1
    2152:	81 f0       	breq	.+32     	; 0x2174 <GPIO_setupPortDirection+0x72>
    2154:	13 c0       	rjmp	.+38     	; 0x217c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2156:	ea e3       	ldi	r30, 0x3A	; 58
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	80 83       	st	Z, r24
    215e:	0e c0       	rjmp	.+28     	; 0x217c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2160:	e7 e3       	ldi	r30, 0x37	; 55
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	80 83       	st	Z, r24
    2168:	09 c0       	rjmp	.+18     	; 0x217c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    216a:	e4 e3       	ldi	r30, 0x34	; 52
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	80 83       	st	Z, r24
    2172:	04 c0       	rjmp	.+8      	; 0x217c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2174:	e1 e3       	ldi	r30, 0x31	; 49
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	80 83       	st	Z, r24
			break;
		}
	}
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <GPIO_writePort+0x6>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <GPIO_writePort+0x8>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	84 30       	cpi	r24, 0x04	; 4
    219e:	90 f5       	brcc	.+100    	; 0x2204 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	3c 83       	std	Y+4, r19	; 0x04
    21a8:	2b 83       	std	Y+3, r18	; 0x03
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	91 05       	cpc	r25, r1
    21b2:	d1 f0       	breq	.+52     	; 0x21e8 <GPIO_writePort+0x5e>
    21b4:	2b 81       	ldd	r18, Y+3	; 0x03
    21b6:	3c 81       	ldd	r19, Y+4	; 0x04
    21b8:	22 30       	cpi	r18, 0x02	; 2
    21ba:	31 05       	cpc	r19, r1
    21bc:	2c f4       	brge	.+10     	; 0x21c8 <GPIO_writePort+0x3e>
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	61 f0       	breq	.+24     	; 0x21de <GPIO_writePort+0x54>
    21c6:	1e c0       	rjmp	.+60     	; 0x2204 <GPIO_writePort+0x7a>
    21c8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ca:	3c 81       	ldd	r19, Y+4	; 0x04
    21cc:	22 30       	cpi	r18, 0x02	; 2
    21ce:	31 05       	cpc	r19, r1
    21d0:	81 f0       	breq	.+32     	; 0x21f2 <GPIO_writePort+0x68>
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	83 30       	cpi	r24, 0x03	; 3
    21d8:	91 05       	cpc	r25, r1
    21da:	81 f0       	breq	.+32     	; 0x21fc <GPIO_writePort+0x72>
    21dc:	13 c0       	rjmp	.+38     	; 0x2204 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    21de:	eb e3       	ldi	r30, 0x3B	; 59
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	80 83       	st	Z, r24
    21e6:	0e c0       	rjmp	.+28     	; 0x2204 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    21e8:	e8 e3       	ldi	r30, 0x38	; 56
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	80 83       	st	Z, r24
    21f0:	09 c0       	rjmp	.+18     	; 0x2204 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    21f2:	e5 e3       	ldi	r30, 0x35	; 53
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	80 83       	st	Z, r24
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    21fc:	e2 e3       	ldi	r30, 0x32	; 50
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	80 83       	st	Z, r24
			break;
		}
	}
}
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <GPIO_readPort+0x6>
    2218:	00 d0       	rcall	.+0      	; 0x221a <GPIO_readPort+0x8>
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2220:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	84 30       	cpi	r24, 0x04	; 4
    2226:	90 f5       	brcc	.+100    	; 0x228c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	3c 83       	std	Y+4, r19	; 0x04
    2230:	2b 83       	std	Y+3, r18	; 0x03
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	91 05       	cpc	r25, r1
    223a:	d1 f0       	breq	.+52     	; 0x2270 <GPIO_readPort+0x5e>
    223c:	2b 81       	ldd	r18, Y+3	; 0x03
    223e:	3c 81       	ldd	r19, Y+4	; 0x04
    2240:	22 30       	cpi	r18, 0x02	; 2
    2242:	31 05       	cpc	r19, r1
    2244:	2c f4       	brge	.+10     	; 0x2250 <GPIO_readPort+0x3e>
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	61 f0       	breq	.+24     	; 0x2266 <GPIO_readPort+0x54>
    224e:	1e c0       	rjmp	.+60     	; 0x228c <GPIO_readPort+0x7a>
    2250:	2b 81       	ldd	r18, Y+3	; 0x03
    2252:	3c 81       	ldd	r19, Y+4	; 0x04
    2254:	22 30       	cpi	r18, 0x02	; 2
    2256:	31 05       	cpc	r19, r1
    2258:	81 f0       	breq	.+32     	; 0x227a <GPIO_readPort+0x68>
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	83 30       	cpi	r24, 0x03	; 3
    2260:	91 05       	cpc	r25, r1
    2262:	81 f0       	breq	.+32     	; 0x2284 <GPIO_readPort+0x72>
    2264:	13 c0       	rjmp	.+38     	; 0x228c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2266:	e9 e3       	ldi	r30, 0x39	; 57
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	0e c0       	rjmp	.+28     	; 0x228c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2270:	e6 e3       	ldi	r30, 0x36	; 54
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	09 c0       	rjmp	.+18     	; 0x228c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    227a:	e3 e3       	ldi	r30, 0x33	; 51
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	04 c0       	rjmp	.+8      	; 0x228c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2284:	e0 e3       	ldi	r30, 0x30	; 48
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    228c:	89 81       	ldd	r24, Y+1	; 0x01
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <main>:
#include "LCD.h"
#include "Ultrasonic.h"
#include <avr/io.h>


int main() {
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62

	SREG |= (1<<7);        //enable interrupts
    22a4:	af e5       	ldi	r26, 0x5F	; 95
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ef e5       	ldi	r30, 0x5F	; 95
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	80 68       	ori	r24, 0x80	; 128
    22b0:	8c 93       	st	X, r24
	LCD_init();            //initialize LCD
    22b2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <LCD_init>
	Ultrasonic_Init();     //initialize Ultrasonic
    22b6:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Ultrasonic_Init>
	LCD_displayString("Distance= ");
    22ba:	80 e6       	ldi	r24, 0x60	; 96
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <LCD_displayString>
	LCD_displayStringRowColumn(0,14,"cm");
    22c2:	2b e6       	ldi	r18, 0x6B	; 107
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	6e e0       	ldi	r22, 0x0E	; 14
    22ca:	a9 01       	movw	r20, r18
    22cc:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <LCD_displayStringRowColumn>
	while (1) {
		LCD_moveCursor(0,11);
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	6b e0       	ldi	r22, 0x0B	; 11
    22d4:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_moveCursor>
		if(Ultrasonic_readDistance() <= 57){
    22d8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Ultrasonic_readDistance>
    22dc:	8a 33       	cpi	r24, 0x3A	; 58
    22de:	91 05       	cpc	r25, r1
    22e0:	30 f4       	brcc	.+12     	; 0x22ee <main+0x52>
			/*the following if conditions are used to calibrate the distance to be accurate*/
			LCD_integerToString(Ultrasonic_readDistance()+1);
    22e2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Ultrasonic_readDistance>
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_integerToString>
    22ec:	15 c0       	rjmp	.+42     	; 0x2318 <main+0x7c>
			/*when distance is below 57 cm there is a negative error of 1 cm*/
		}
		else if((Ultrasonic_readDistance() >= 57) && (Ultrasonic_readDistance() <= 150)){
    22ee:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Ultrasonic_readDistance>
    22f2:	89 33       	cpi	r24, 0x39	; 57
    22f4:	91 05       	cpc	r25, r1
    22f6:	58 f0       	brcs	.+22     	; 0x230e <main+0x72>
    22f8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Ultrasonic_readDistance>
    22fc:	87 39       	cpi	r24, 0x97	; 151
    22fe:	91 05       	cpc	r25, r1
    2300:	30 f4       	brcc	.+12     	; 0x230e <main+0x72>
			LCD_integerToString(Ultrasonic_readDistance()+2);
    2302:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Ultrasonic_readDistance>
    2306:	02 96       	adiw	r24, 0x02	; 2
    2308:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_integerToString>
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <main+0x7c>

			/*when distance is more than 57 cm and less than 150 cm there is a negative error of 2 cm*/
		}
		else{
			LCD_integerToString(Ultrasonic_readDistance()+3);
    230e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Ultrasonic_readDistance>
    2312:	03 96       	adiw	r24, 0x03	; 3
    2314:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_integerToString>
			/*when distance is more than 150 cm there is a negative error of 3 cm*/
		}
		LCD_displayCharacter(' ');  //to prevent error in number display when going below 3 digit number ex: 100 --> 990
    2318:	80 e2       	ldi	r24, 0x20	; 32
    231a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_displayCharacter>
    231e:	d8 cf       	rjmp	.-80     	; 0x22d0 <main+0x34>

00002320 <__prologue_saves__>:
    2320:	2f 92       	push	r2
    2322:	3f 92       	push	r3
    2324:	4f 92       	push	r4
    2326:	5f 92       	push	r5
    2328:	6f 92       	push	r6
    232a:	7f 92       	push	r7
    232c:	8f 92       	push	r8
    232e:	9f 92       	push	r9
    2330:	af 92       	push	r10
    2332:	bf 92       	push	r11
    2334:	cf 92       	push	r12
    2336:	df 92       	push	r13
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	ca 1b       	sub	r28, r26
    234a:	db 0b       	sbc	r29, r27
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	09 94       	ijmp

00002358 <__epilogue_restores__>:
    2358:	2a 88       	ldd	r2, Y+18	; 0x12
    235a:	39 88       	ldd	r3, Y+17	; 0x11
    235c:	48 88       	ldd	r4, Y+16	; 0x10
    235e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2360:	6e 84       	ldd	r6, Y+14	; 0x0e
    2362:	7d 84       	ldd	r7, Y+13	; 0x0d
    2364:	8c 84       	ldd	r8, Y+12	; 0x0c
    2366:	9b 84       	ldd	r9, Y+11	; 0x0b
    2368:	aa 84       	ldd	r10, Y+10	; 0x0a
    236a:	b9 84       	ldd	r11, Y+9	; 0x09
    236c:	c8 84       	ldd	r12, Y+8	; 0x08
    236e:	df 80       	ldd	r13, Y+7	; 0x07
    2370:	ee 80       	ldd	r14, Y+6	; 0x06
    2372:	fd 80       	ldd	r15, Y+5	; 0x05
    2374:	0c 81       	ldd	r16, Y+4	; 0x04
    2376:	1b 81       	ldd	r17, Y+3	; 0x03
    2378:	aa 81       	ldd	r26, Y+2	; 0x02
    237a:	b9 81       	ldd	r27, Y+1	; 0x01
    237c:	ce 0f       	add	r28, r30
    237e:	d1 1d       	adc	r29, r1
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	ed 01       	movw	r28, r26
    238c:	08 95       	ret

0000238e <itoa>:
    238e:	fb 01       	movw	r30, r22
    2390:	9f 01       	movw	r18, r30
    2392:	e8 94       	clt
    2394:	42 30       	cpi	r20, 0x02	; 2
    2396:	c4 f0       	brlt	.+48     	; 0x23c8 <itoa+0x3a>
    2398:	45 32       	cpi	r20, 0x25	; 37
    239a:	b4 f4       	brge	.+44     	; 0x23c8 <itoa+0x3a>
    239c:	4a 30       	cpi	r20, 0x0A	; 10
    239e:	29 f4       	brne	.+10     	; 0x23aa <itoa+0x1c>
    23a0:	97 fb       	bst	r25, 7
    23a2:	1e f4       	brtc	.+6      	; 0x23aa <itoa+0x1c>
    23a4:	90 95       	com	r25
    23a6:	81 95       	neg	r24
    23a8:	9f 4f       	sbci	r25, 0xFF	; 255
    23aa:	64 2f       	mov	r22, r20
    23ac:	77 27       	eor	r23, r23
    23ae:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__udivmodhi4>
    23b2:	80 5d       	subi	r24, 0xD0	; 208
    23b4:	8a 33       	cpi	r24, 0x3A	; 58
    23b6:	0c f0       	brlt	.+2      	; 0x23ba <itoa+0x2c>
    23b8:	89 5d       	subi	r24, 0xD9	; 217
    23ba:	81 93       	st	Z+, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	a1 f7       	brne	.-24     	; 0x23aa <itoa+0x1c>
    23c2:	16 f4       	brtc	.+4      	; 0x23c8 <itoa+0x3a>
    23c4:	5d e2       	ldi	r21, 0x2D	; 45
    23c6:	51 93       	st	Z+, r21
    23c8:	10 82       	st	Z, r1
    23ca:	c9 01       	movw	r24, r18
    23cc:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <strrev>

000023d0 <strrev>:
    23d0:	dc 01       	movw	r26, r24
    23d2:	fc 01       	movw	r30, r24
    23d4:	67 2f       	mov	r22, r23
    23d6:	71 91       	ld	r23, Z+
    23d8:	77 23       	and	r23, r23
    23da:	e1 f7       	brne	.-8      	; 0x23d4 <strrev+0x4>
    23dc:	32 97       	sbiw	r30, 0x02	; 2
    23de:	04 c0       	rjmp	.+8      	; 0x23e8 <strrev+0x18>
    23e0:	7c 91       	ld	r23, X
    23e2:	6d 93       	st	X+, r22
    23e4:	70 83       	st	Z, r23
    23e6:	62 91       	ld	r22, -Z
    23e8:	ae 17       	cp	r26, r30
    23ea:	bf 07       	cpc	r27, r31
    23ec:	c8 f3       	brcs	.-14     	; 0x23e0 <strrev+0x10>
    23ee:	08 95       	ret

000023f0 <__udivmodhi4>:
    23f0:	aa 1b       	sub	r26, r26
    23f2:	bb 1b       	sub	r27, r27
    23f4:	51 e1       	ldi	r21, 0x11	; 17
    23f6:	07 c0       	rjmp	.+14     	; 0x2406 <__udivmodhi4_ep>

000023f8 <__udivmodhi4_loop>:
    23f8:	aa 1f       	adc	r26, r26
    23fa:	bb 1f       	adc	r27, r27
    23fc:	a6 17       	cp	r26, r22
    23fe:	b7 07       	cpc	r27, r23
    2400:	10 f0       	brcs	.+4      	; 0x2406 <__udivmodhi4_ep>
    2402:	a6 1b       	sub	r26, r22
    2404:	b7 0b       	sbc	r27, r23

00002406 <__udivmodhi4_ep>:
    2406:	88 1f       	adc	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	5a 95       	dec	r21
    240c:	a9 f7       	brne	.-22     	; 0x23f8 <__udivmodhi4_loop>
    240e:	80 95       	com	r24
    2410:	90 95       	com	r25
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	08 95       	ret

00002418 <_exit>:
    2418:	f8 94       	cli

0000241a <__stop_program>:
    241a:	ff cf       	rjmp	.-2      	; 0x241a <__stop_program>
